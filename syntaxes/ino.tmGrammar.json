{
  "information_for_contributors": [
    "This file has been converted from https://github.com/atom/language-c/blob/master/grammars/c.cson",
    "If you want to provide a fix or improvement, please create a pull request against the original repository.",
    "Once accepted there, we are happy to receive an update request."
  ],
  "version": "https://github.com/atom/language-c/commit/9c0c5f202741a5647025db8d5df5fefba47b036c",
  "name": "Ino",
  "scopeName": "source.ino",
  "patterns": [
    {
      "include": "#special_block"
    },
    {
      "include": "#strings"
    },
    {
      "match": "\\b(friend|explicit|virtual|override|final|noexcept)\\b",
      "name": "storage.modifier.cpp"
    },
    {
      "match": "\\b(private:|protected:|public:)",
      "name": "storage.modifier.cpp"
    },
    {
      "match": "\\b(catch|operator|try|throw|using)\\b",
      "name": "keyword.control.cpp"
    },
    {
      "match": "\\bdelete\\b(\\s*\\[\\])?|\\bnew\\b(?!])",
      "name": "keyword.control.cpp"
    },
    {
      "match": "\\b(f|m)[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.member.cpp"
    },
    {
      "match": "\\bthis\\b",
      "name": "variable.language.this.cpp"
    },
    {
      "match": "\\bnullptr\\b",
      "name": "constant.language.cpp"
    },
    {
      "match": "\\btemplate\\b\\s*",
      "name": "storage.type.template.cpp"
    },
    {
      "match": "\\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\\b\\s*",
      "name": "keyword.operator.cast.cpp"
    },
    {
      "match": "::",
      "name": "punctuation.separator.namespace.access.cpp"
    },
    {
      "match": "\\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\b",
      "name": "keyword.operator.cpp"
    },
    {
      "match": "\\b(class|decltype|wchar_t|char16_t|char32_t)\\b",
      "name": "storage.type.cpp"
    },
    {
      "match": "\\b(constexpr|export|mutable|typename|thread_local)\\b",
      "name": "storage.modifier.cpp"
    },
    {
      "begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.cpp"
        },
        "2": {
          "name": "punctuation.definition.parameters.begin.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.c"
        }
      },
      "name": "meta.function.destructor.cpp",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    {
      "begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.cpp"
        },
        "2": {
          "name": "punctuation.definition.parameters.begin.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.c"
        }
      },
      "name": "meta.function.destructor.prototype.cpp",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    {
      "include": "source.c"
    },
    {
      "include": "#preprocessor-rule-enabled"
    },
    {
      "include": "#preprocessor-rule-disabled"
    },
    {
      "include": "#preprocessor-rule-conditional"
    },
    {
      "include": "#comments"
    },
    {
      "match": "\\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\\b",
      "name": "keyword.control.c"
    },
    {
      "match": "\\b(loop|setup)\\b",
      "name": "support.function"
    },
    {
      "include": "#storage_types"
    },
    {
      "match": "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
      "name": "storage.modifier.c"
    },
    {
      "match": "\\bk[A-Z]\\w*\\b",
      "name": "constant.other.variable.mac-classic.c"
    },
    {
      "match": "\\bg[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.global.mac-classic.c"
    },
    {
      "match": "\\bs[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.static.mac-classic.c"
    },
    {
      "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
      "name": "constant.language.c"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+    # define\n((?<id>[a-zA-Z_$][\\w$]*))      # macro name\n(?:\n  (\\()\n    (\n      \\s* \\g<id> \\s*         # first argument\n      ((,) \\s* \\g<id> \\s*)*  # additional arguments\n      (?:\\.\\.\\.)?            # varargs ellipsis?\n    )\n  (\\))\n)?",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.define.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        },
        "3": {
          "name": "entity.name.function.preprocessor.c"
        },
        "5": {
          "name": "punctuation.definition.parameters.begin.c"
        },
        "6": {
          "name": "variable.parameter.preprocessor.c"
        },
        "8": {
          "name": "punctuation.separator.parameters.c"
        },
        "9": {
          "name": "punctuation.definition.parameters.end.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.macro.c",
      "patterns": [
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    {
      "begin": "^\\s*((#)\\s*(error|warning))\\b",
      "captures": {
        "1": {
          "name": "keyword.control.directive.diagnostic.$3.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?<!\\\\)(?=\\n)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))",
      "name": "meta.preprocessor.diagnostic.c",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.$3.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.include.c",
      "patterns": [
        {
          "include": "#line_continuation_character"
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.include.c"
        },
        {
          "begin": "<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.other.lt-gt.include.c"
        }
      ]
    },
    {
      "include": "#pragma-mark"
    },
    {
      "begin": "^\\s*((#)\\s*line)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.line.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.c",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "begin": "^\\s*(?:((#)\\s*undef))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.undef.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.c",
      "patterns": [
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.preprocessor.c"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "begin": "^\\s*(?:((#)\\s*pragma))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.pragma.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.pragma.c",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "match": "[a-zA-Z_$][\\w\\-$]*",
          "name": "entity.other.attribute-name.pragma.preprocessor.c"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "match": "\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\b",
      "name": "support.type.sys-types.c"
    },
    {
      "match": "\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\b",
      "name": "support.type.pthread.c"
    },
    {
      "match": "(?x) \\b\n(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t\n|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t\n|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t\n|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t\n|uintmax_t|uintmax_t)\n\\b",
      "name": "support.type.stdint.c"
    },
    {
      "match": "\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\b",
      "name": "support.constant.mac-classic.c"
    },
    {
      "match": "(?x) \\b\n(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam\n|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr\n|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber\n|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64\n|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32\n|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr\n|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\n\\b",
      "name": "support.type.mac-classic.c"
    },
    {
      "match": "\\b([A-Za-z0-9_]+_t)\\b",
      "name": "support.type.posix-reserved.c"
    },
    {
      "include": "#block"
    },
    {
      "include": "#parens"
    },
    {
      "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function.c",
      "patterns": [
        {
          "include": "#function-innards"
        }
      ]
    },
    {
      "include": "#line_continuation_character"
    },
    {
      "match": "(\\[)|(\\])",
      "captures": {
        "1": {
          "name": "punctuation.definition.begin.bracket.square.c"
        },
        "2": {
          "name": "punctuation.definition.end.bracket.square.c"
        }
      }
    },
    {
      "match": ";",
      "name": "punctuation.terminator.statement.c"
    },
    {
      "match": ",",
      "name": "punctuation.separator.delimiter.c"
    }
  ],
  "repository": {
    "access": {
      "captures": {
        "2": {
          "name": "punctuation.separator.dot-access.c"
        },
        "3": {
          "name": "punctuation.separator.pointer-access.c"
        },
        "4": {
          "name": "variable.other.member.c"
        }
      },
      "match": "((\\.)|(->))\\s*(([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\())?"
    },
    "block": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.block.begin.bracket.curly.c"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.block.end.bracket.curly.c"
        }
      },
      "name": "meta.block.cpp",
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "name": "meta.block.c",
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "include": "$base"
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#preprocessor-rule-enabled-block"
        },
        {
          "include": "#preprocessor-rule-disabled-block"
        },
        {
          "include": "#preprocessor-rule-conditional-block"
        },
        {
          "include": "#access"
        },
        {
          "include": "#libc"
        },
        {
          "include": "#c_function_call"
        },
        {
          "captures": {
            "1": {
              "name": "variable.other.c"
            },
            "2": {
              "name": "punctuation.definition.parameters.c"
            }
          },
          "match": "(?x)\n(?:\n  (?:\n    (?=\\s)(?<!else|new|return)\n    (?<=\\w) \\s+  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "name": "meta.initialization.c"
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "include": "#parens-block"
        },
        {
          "include": "$base"
        }
      ]
    },
    "c_function_call": {
      "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function-call.c",
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.c"
            }
          },
          "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
          "name": "comment.block.c"
        },
        {
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.c"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.c"
            }
          },
          "name": "comment.block.c"
        },
        {
          "match": "\\*/.*\\n",
          "name": "invalid.illegal.stray-comment-end.c"
        },
        {
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.c"
            }
          },
          "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
          "name": "comment.line.banner.cpp"
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.cpp"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.cpp"
                }
              },
              "end": "(?=\\n)",
              "name": "comment.line.double-slash.cpp",
              "patterns": [
                {
                  "include": "#line_continuation_character"
                }
              ]
            }
          ]
        }
      ]
    },
    "disabled": {
      "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
      "end": "^\\s*#\\s*endif\\b",
      "patterns": [
        {
          "include": "#disabled"
        },
        {
          "include": "#pragma-mark"
        }
      ]
    },
    "libc": {
      "captures": {
        "1": {
          "name": "punctuation.whitespace.support.function.leading.c"
        },
        "2": {
          "name": "support.function.C99.c"
        }
      },
      "match": "(?x) (\\s*) \\b\n(_Exit|(?:nearbyint|nextafter|nexttoward|netoward|nan)[fl]?|a(?:cos|sin)h?[fl]?|abort|abs|asctime|assert\n|atan(?:[h2]?[fl]?)?|atexit|ato[ifl]|atoll|bsearch|btowc|cabs[fl]?|cacos|cacos[fl]|cacosh[fl]?\n|calloc|carg[fl]?|casinh?[fl]?|catanh?[fl]?|cbrt[fl]?|ccosh?[fl]?|ceil[fl]?|cexp[fl]?|cimag[fl]?\n|clearerr|clock|clog[fl]?|conj[fl]?|copysign[fl]?|cosh?[fl]?|cpow[fl]?|cproj[fl]?|creal[fl]?\n|csinh?[fl]?|csqrt[fl]?|ctanh?[fl]?|ctime|difftime|div|erfc?[fl]?|exit|fabs[fl]?\n|exp(?:2[fl]?|[fl]|m1[fl]?)?|fclose|fdim[fl]?|fe[gs]et(?:env|exceptflag|round)|feclearexcept\n|feholdexcept|feof|feraiseexcept|ferror|fetestexcept|feupdateenv|fflush|fgetpos|fgetw?[sc]\n|floor[fl]?|fmax?[fl]?|fmin[fl]?|fmod[fl]?|fopen|fpclassify|fprintf|fputw?[sc]|fread|free|freopen\n|frexp[fl]?|fscanf|fseek|fsetpos|ftell|fwide|fwprintf|fwrite|fwscanf|genv|get[sc]|getchar|gmtime\n|gwc|gwchar|hypot[fl]?|ilogb[fl]?|imaxabs|imaxdiv|isalnum|isalpha|isblank|iscntrl|isdigit|isfinite\n|isgraph|isgreater|isgreaterequal|isinf|isless(?:equal|greater)?|isw?lower|isnan|isnormal|isw?print\n|isw?punct|isw?space|isunordered|isw?upper|iswalnum|iswalpha|iswblank|iswcntrl|iswctype|iswdigit|iswgraph\n|isw?xdigit|labs|ldexp[fl]?|ldiv|lgamma[fl]?|llabs|lldiv|llrint[fl]?|llround[fl]?|localeconv|localtime\n|log[2b]?[fl]?|log1[p0][fl]?|longjmp|lrint[fl]?|lround[fl]?|malloc|mbr?len|mbr?towc|mbsinit|mbsrtowcs\n|mbstowcs|memchr|memcmp|memcpy|memmove|memset|mktime|modf[fl]?|perror|pow[fl]?|printf|puts|putw?c(?:har)?\n|qsort|raise|rand|remainder[fl]?|realloc|remove|remquo[fl]?|rename|rewind|rint[fl]?|round[fl]?|scalbl?n[fl]?\n|scanf|setbuf|setjmp|setlocale|setvbuf|signal|signbit|sinh?[fl]?|snprintf|sprintf|sqrt[fl]?|srand|sscanf\n|strcat|strchr|strcmp|strcoll|strcpy|strcspn|strerror|strftime|strlen|strncat|strncmp|strncpy|strpbrk\n|strrchr|strspn|strstr|strto[kdf]|strtoimax|strtol[dl]?|strtoull?|strtoumax|strxfrm|swprintf|swscanf\n|system|tan|tan[fl]|tanh[fl]?|tgamma[fl]?|time|tmpfile|tmpnam|tolower|toupper|trunc[fl]?|ungetw?c|va_arg\n|va_copy|va_end|va_start|vfw?printf|vfw?scanf|vprintf|vscanf|vsnprintf|vsprintf|vsscanf|vswprintf|vswscanf\n|vwprintf|vwscanf|wcrtomb|wcscat|wcschr|wcscmp|wcscoll|wcscpy|wcscspn|wcsftime|wcslen|wcsncat|wcsncmp|wcsncpy\n|wcspbrk|wcsrchr|wcsrtombs|wcsspn|wcsstr|wcsto[dkf]|wcstoimax|wcstol[dl]?|wcstombs|wcstoull?|wcstoumax|wcsxfrm\n|wctom?b|wmem(?:set|chr|cpy|cmp|move)|wprintf|wscanf)\\b"
    },
    "line_continuation_character": {
      "patterns": [
        {
          "match": "(\\\\)\\n",
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation.c"
            }
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
          "name": "constant.numeric.c"
        }
      ]
    },
    "parens": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.c"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "parens-block": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.c"
        }
      },
      "patterns": [
        {
          "include": "#block_innards"
        }
      ]
    },
    "pragma-mark": {
      "captures": {
        "1": {
          "name": "meta.preprocessor.pragma.c"
        },
        "2": {
          "name": "keyword.control.directive.pragma.pragma-mark.c"
        },
        "3": {
          "name": "punctuation.definition.directive.c"
        },
        "4": {
          "name": "entity.name.tag.pragma-mark.c"
        }
      },
      "match": "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
      "name": "meta.section"
    },
    "operators": {
      "patterns": [
        {
          "match": "(?<![\\w$])(sizeof)(?![\\w$])",
          "name": "keyword.operator.sizeof.c"
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.c"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.c"
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.c"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.c"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.c"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.c"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.c"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.c"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.c"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.c"
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "end": ":",
          "applyEndPatternLast": true,
          "endCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "patterns": [
            {
              "include": "#access"
            },
            {
              "include": "#libc"
            },
            {
              "include": "#c_function_call"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "(u|u8|U|L)?\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp"
            },
            "1": {
              "name": "meta.encoding.cpp"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp"
            }
          },
          "name": "string.quoted.double.cpp",
          "patterns": [
            {
              "match": "\\\\u\\h{4}|\\\\U\\h{8}",
              "name": "constant.character.escape.cpp"
            },
            {
              "match": "\\\\['\"?\\\\abfnrtv]",
              "name": "constant.character.escape.cpp"
            },
            {
              "match": "\\\\[0-7]{1,3}",
              "name": "constant.character.escape.cpp"
            },
            {
              "match": "\\\\x\\h+",
              "name": "constant.character.escape.cpp"
            },
            {
              "include": "source.c#string_placeholder"
            }
          ]
        },
        {
          "begin": "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cpp"
            },
            "1": {
              "name": "meta.encoding.cpp"
            },
            "3": {
              "name": "invalid.illegal.delimiter-too-long.cpp"
            }
          },
          "end": "\\)\\2(\\3)\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.cpp"
            },
            "1": {
              "name": "invalid.illegal.delimiter-too-long.cpp"
            }
          },
          "name": "string.quoted.double.raw.cpp"
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape.c"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape.c"
        }
      ]
    },
    "string_placeholder": {
      "patterns": [
        {
          "match": "(?x) %\n(\\d+\\$)?                           # field (argument #)\n[#0\\- +']*                          # flags\n[,;:_]?                              # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]           # conversion type",
          "name": "constant.other.placeholder.c"
        },
        {
          "match": "(%)(?!\"\\s*(PRI|SCN))",
          "captures": {
            "1": {
              "name": "invalid.illegal.placeholder.c"
            }
          }
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "match": "\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\b",
          "name": "storage.type.c"
        }
      ]
    },
    "vararg_ellipses": {
      "match": "(?<!\\.)\\.\\.\\.(?!\\.)",
      "name": "punctuation.vararg-ellipses.c"
    },
    "preprocessor-rule-conditional": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#preprocessor-rule-enabled-elif"
            },
            {
              "include": "#preprocessor-rule-enabled-else"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.c"
            }
          }
        }
      ]
    },
    "preprocessor-rule-conditional-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block"
            },
            {
              "include": "#preprocessor-rule-enabled-else-block"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.c"
            }
          }
        }
      ]
    },
    "preprocessor-rule-conditional-line": {
      "patterns": [
        {
          "match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
          "name": "keyword.control.directive.conditional.c"
        },
        {
          "match": "\\bdefined\\b",
          "name": "invalid.illegal.macro-name.c"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#operators"
        },
        {
          "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
          "name": "constant.language.c"
        },
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.preprocessor.c"
        },
        {
          "include": "#line_continuation_character"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preprocessor-rule-enabled-elif"
            },
            {
              "include": "#preprocessor-rule-enabled-else"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.c",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line"
                    }
                  ]
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block"
            },
            {
              "include": "#preprocessor-rule-enabled-else-block"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.c",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line"
                    }
                  ]
                },
                {
                  "include": "#block_innards"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "contentName": "comment.block.preprocessor.elif-branch.c",
          "patterns": [
            {
              "include": "#disabled"
            },
            {
              "include": "#pragma-mark"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            },
            "3": {
              "name": "constant.numeric.preprocessor.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.else-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "$base"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.else-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#block_innards"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-elif-block": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-else": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "preprocessor-rule-enabled-else-block": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "#block_innards"
        }
      ]
    },
    "preprocessor-rule-define-line-contents": {
      "patterns": [
        {
          "include": "#vararg_ellipses"
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "name": "meta.block.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks"
            }
          ]
        },
        {
          "match": "\\(",
          "name": "punctuation.section.parens.begin.bracket.round.c"
        },
        {
          "match": "\\)",
          "name": "punctuation.section.parens.end.bracket.round.c"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
          "end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
          "name": "meta.function.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "include": "#access"
        },
        {
          "include": "#libc"
        },
        {
          "include": "$base"
        }
      ]
    },
    "preprocessor-rule-define-line-blocks": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks"
            },
            {
              "include": "#preprocessor-rule-define-line-contents"
            }
          ]
        },
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    "preprocessor-rule-define-line-functions": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "include": "#access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.c"
            }
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.arguments.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    "function-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.parameters.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parameters.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "include": "$base"
        }
      ]
    },
    "function-call-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "angle_brackets": {
      "begin": "<",
      "end": ">",
      "name": "meta.angle-brackets.cpp",
      "patterns": [
        {
          "include": "#angle_brackets"
        },
        {
          "include": "$base"
        }
      ]
    },
    "constructor": {
      "patterns": [
        {
          "begin": "(?x)\n(?:^\\s*)  # beginning of line\n((?!while|for|do|if|else|switch|catch|enumerate|r?iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n\\s*(\\()  # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.cpp"
            },
            "2": {
              "name": "punctuation.definition.parameters.begin.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.c"
            }
          },
          "name": "meta.function.constructor.cpp",
          "patterns": [
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "(?x)\n(:)\n(\n  (?=\n    \\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    \\s* (\\() # opening bracket\n  )\n)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.c"
            }
          },
          "end": "(?=\\{)",
          "name": "meta.function.constructor.initializer-list.cpp",
          "patterns": [
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "special_block": {
      "patterns": [
        {
          "begin": "\\b(using)\\b\\s*(namespace)\\b\\s*((?:[_A-Za-z][_A-Za-z0-9]*\\b(::)?)*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.cpp"
            },
            "2": {
              "name": "storage.type.cpp"
            },
            "3": {
              "name": "entity.name.type.cpp"
            }
          },
          "end": "(;)",
          "name": "meta.using-namespace-declaration.cpp"
        },
        {
          "begin": "\\b(namespace)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+",
          "beginCaptures": {
            "1": {
              "name": "storage.type.cpp"
            },
            "2": {
              "name": "entity.name.type.cpp"
            }
          },
          "captures": {
            "1": {
              "name": "keyword.control.namespace.$2"
            }
          },
          "end": "(?<=\\})|(?=(;|,|\\(|\\)|>|\\[|\\]|=))",
          "name": "meta.namespace-block.cpp",
          "patterns": [
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.scope.cpp"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.scope.cpp"
                }
              },
              "patterns": [
                {
                  "include": "#special_block"
                },
                {
                  "include": "#constructor"
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "\\b(class|struct)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+(\\s*:\\s*(public|protected|private)\\s*([_A-Za-z][_A-Za-z0-9]*\\b)((\\s*,\\s*(public|protected|private)\\s*[_A-Za-z][_A-Za-z0-9]*\\b)*))?",
          "beginCaptures": {
            "1": {
              "name": "storage.type.cpp"
            },
            "2": {
              "name": "entity.name.type.cpp"
            },
            "4": {
              "name": "storage.type.modifier.cpp"
            },
            "5": {
              "name": "entity.name.type.inherited.cpp"
            },
            "6": {
              "patterns": [
                {
                  "match": "(public|protected|private)",
                  "name": "storage.type.modifier.cpp"
                },
                {
                  "match": "[_A-Za-z][_A-Za-z0-9]*",
                  "name": "entity.name.type.inherited.cpp"
                }
              ]
            }
          },
          "end": "(?<=\\})|(?=(;|\\(|\\)|>|\\[|\\]|=))",
          "name": "meta.class-struct-block.cpp",
          "patterns": [
            {
              "include": "#angle_brackets"
            },
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.block.begin.bracket.curly.cpp"
                }
              },
              "end": "(\\})(\\s*\\n)?",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.block.end.bracket.curly.cpp"
                },
                "2": {
                  "name": "invalid.illegal.you-forgot-semicolon.cpp"
                }
              },
              "patterns": [
                {
                  "include": "#special_block"
                },
                {
                  "include": "#constructor"
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "begin": "\\b(extern)(?=\\s*\")",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.cpp"
            }
          },
          "end": "(?<=\\})|(?=\\w)|(?=\\s*#\\s*endif\\b)",
          "name": "meta.extern-block.cpp",
          "patterns": [
            {
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.block.begin.bracket.curly.c"
                }
              },
              "end": "\\}|(?=\\s*#\\s*endif\\b)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.block.end.bracket.curly.c"
                }
              },
              "patterns": [
                {
                  "include": "#special_block"
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    }
  }
}
